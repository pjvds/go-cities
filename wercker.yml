box: wercker/golang
build:
  steps:
    - pjvds/setup-go-workspace

    # - script:
    #     name: Populate cache
    #     code: |-
    #         # BEFORE YOU COPY AND USE THIS STEP IN YOUR OWN BUILD PIPELINE
    #         # MAKE SURE YOU SET $WERCKER_SOURCE_DIR TO THE PACKAGE DIRECTORY
    #         # OR YOUR PROJECT, LIKE: $GOPATH/github.com/pjvds/httpcallback.io
    #         if test -d "$WERCKER_CACHE_DIR/go-pkg-cache"; then rsync -avzv --exclude "$WERCKER_SOURCE_DIR" "$WERCKER_CACHE_DIR/go-pkg-cache/" "$GOPATH/" ; fi

    - script:
        name: Write to artifact dir
        code: |-
           echo "foobar" > $WERCKER_REPORT_ARTIFACTS_DIR/log.txt
           echo "baz" > $WERCKER_REPORT_ARTIFACTS_DIR/log2.txt
           
           

    - script:
        name: Get dependencies
        code: |-
            go get -v ./...

    - script:
        name: Build
        code: |
            go build -a -v ./...

    - script:
        name: Test
        code: |-
            go test ./...

    - script:
        name: Store cache
        code: |-
            # BEFORE YOU COPY AND USE THIS STEP IN YOUR OWN BUILD PIPELINE
            # MAKE SURE YOU SET $WERCKER_SOURCE_DIR TO THE PACKAGE DIRECTORY
            # OR YOUR PROJECT, LIKE: $GOPATH/github.com/pjvds/httpcallback.io
            rsync -avzv --exclude "$WERCKER_SOURCE_DIR" "$GOPATH/" "$WERCKER_CACHE_DIR/go-pkg-cache/"

    - script:
        name: Copy output
        code: |-
          rsync -avz "$WERCKER_SOURCE_DIR/" "$WERCKER_OUTPUT_DIR"

deploy:
  steps:
    - pjvds/setup-go-workspace
    - pjvds/appengine-deploy:
        email: pj@born2code.net
        password: $APP_ENGINE_PASS
